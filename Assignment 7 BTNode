package BTpackage;

public class BTNode {

	BTNode left, right; 
	int data; 
	
	// build constructor 
	public BTNode(){
		left = null;
		right = null; 
		data = 0; 
	}
	
	//build constructor 
	public BTNode(int n) {
		left = null; 
		right = null;
		data =n;
	}
	
	//function to set left node 
	public void setLeft(BTNode n) {
		left = n;
	}
	
	//function to set right node
	public void setRight(BTNode n) {
		right = n;
	}
	
	//function to get left node
	public BTNode getLeft() {
		return left; 
	}
	
	//function to get right node 
	public BTNode getRight() {
		return right; 
	}
	
	//function to set data to node 
	public void setData(int d) {
		data = d;
	}
	
	//function to get data from node {
	public int getData() {
		return data; 
	}
}

/* Creates a nested class. this is very helpful when you have one class that is useful for
 *  only one other class. Can be called a helper class */

class BT {
	private BTNode root; 
	
	//creates constructor
	public BT() {
		root = null;
	}
	
	//function to check if tree is empty 
	public boolean isEmpty() {
		return root == null;
	}
	
	//function to insert data 
	public void insert(int data) {
		root = insert(root, data);
	}
	
	//function to insert data recursively
	private BTNode insert(BTNode node, int data) {
		if(node == null)
			node = new BTNode(data);
		else {
			if (node.getRight() == null)
				node.right = insert(node.right, data);
			else 
				node.left = insert(node.left, data);
		}
		return node;
	}
	
	//function to count number of nodes 
	public int countNodes () {
		return countNodes(root);
	}
	
	//function to count number of nodes recursively
	private int countNodes(BTNode r) {
	if (r == null)
		return 0;
	else {
		int l = 1; 
		l += countNodes(r.getLeft());
		l += countNodes(r.getRight());
		return l;
	}
	}
	
	//function to search for an element 
	public boolean search (int val) {
		return search(root, val);
	}
	
	//function to search for an element recursively
	private boolean search(BTNode r, int val) {
		if (r.getData() == val)
			return true; 
		if (r.getLeft() != null)
			if(search(r.getLeft(), val))
					return true;
		if (r.getRight() != null)
			if(search(r.getRight(), val))
				return true;
		return false;
	}
	
	/*function for inorder traversal 
	 * it is coded like this so the constructor inorder will only run if the private constructor does not return null*/
	public void inorder() {
		inorder(root);
	}
	private void inorder(BTNode r) {
		if (r != null)
		{
			inorder(r.getLeft());
			System.out.print(r.getData() +" ");
			inorder(r.getRight());
		}
	}
	
	//function for preorder traversal
	public void preorder() {
		preorder(root);
	}
	private void preorder(BTNode r) {
		if (r != null) {
			System.out.print(r.getData() + " ");
			preorder(r.getLeft());
			preorder(r.getRight());
		}
	}
	
	//function for postorder traversal 
	public void postorder() {
		postorder(root);
	}
	private void postorder(BTNode r) {
		if(r !=null) {
			postorder(r.getLeft());
			postorder(r.getRight());
			System.out.print(r.getData()+ " ");
		}
	}
}
